Assumtions for respective sub-question :

1.(a) First 4 cycles => (A-B) ; Last 4 cycles => (A+B). 
1.(b) Cycle 1,3,5,7 => (NOT A) ; Cycle 2,4,6,8 => (NOT B).
1.(c) First 4 cycles => (A NAND B) ; Last 4 cycles => (A OR B). 
1.(d) Cycle 1,2 => (A OR B) ; Cycle 3,4 => (A XOR B) ; Cycle 5,6 => (A+B) ; Cycle => (NOT A).
1.(e) Cycle 1 to 7 => No result ; Cycle 8 => (A+B).
1.(f) Cycle 1,2,3 => (A OR B) ; Cycle 4,5,6 => (A NAND B) ; Cycle 7,8 => No result.
	In 1.(e) and 1.(f), to implement the no result output uniquely, we have assigned all 9 bits as '1'. Because this output can not be generated from any other operation of two 8 bit 
	numbers. The maximum value possible by using other operations is "111111110". And therefore this output can be distinguished from the other outputs. If needed it can be easily 
	connected to a switch as mentioned in the pdf using a NAND gate to switch off the led. But as the block diagram doesn't have any other output so no seperate output is given. It 
	can be identified if the output generates "111111111".
1.(g) Cycle 1 => (A XOR B) ; Remaining Cycles => Hold the result so we have assigned the same XOR operation for the remaining cycles.
1.(h) Cycle 1 => (A OR B) ; Cycle 2 => (A AND B) ; Remaining Cycles => Hold the result so we have assigned the same AND operation from the last cycle for the remaining cycles.